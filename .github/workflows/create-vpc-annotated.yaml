# 이 워크플로의 이름입니다.
name: Deploy VPC via CloudFormation

# ============================================================
# GitHub Actions Workflow
# 목적: AWS CloudFormation을 이용하여 3-Tier VPC 네트워크 인프라 자동 생성
# 구성 요소:
# - vpc-3tier.yaml 파일: CloudFormation 템플릿
# - 워크플로 트리거: 파일 변경(push) 또는 수동 실행(workflow_dispatch)
# - 배포 리전: ap-northeast-2 (서울)
# - IAM 권한이 필요한 경우 CAPABILITY_NAMED_IAM 지정 필요
# ============================================================

# 워크플로가 실행될 조건을 정의합니다.
on:
# 특정 파일 변경 시 자동 실행되도록 설정합니다.
  push:
    # 아래 두 파일 중 하나라도 변경되면 자동 실행됨
# 실행을 유발할 파일 경로들을 지정합니다.
    paths:
      - 'vpc-3tier.yaml'                          # CloudFormation VPC 템플릿
      - '.github/workflows/create-vpc.yaml'       # 이 워크플로 자체
  workflow_dispatch:                              # GitHub UI에서 수동 실행 허용

# 실행할 작업(job)을 정의합니다.
jobs:
  deploy:
    # GitHub Actions 실행 환경 (Ubuntu Linux 최신 버전 사용)
# 최신 Ubuntu 환경에서 실행되도록 지정합니다.
    runs-on: ubuntu-latest

    steps:
      # ------------------------------------------------------
      # Step 1: GitHub 저장소 코드 체크아웃
      # 이 단계에서 현재 브랜치의 코드들을 runner 환경으로 가져옵니다.
      # ------------------------------------------------------
# 이 단계의 이름을 정의합니다.
      - name: Checkout repository
# 재사용 가능한 GitHub Action을 지정합니다.
        uses: actions/checkout@v3

      # ------------------------------------------------------
      # Step 2: AWS 자격 증명 구성
      # GitHub Secrets에 등록된 IAM 사용자 키를 사용하여 AWS CLI 인증
      # 필수 사전 조건:
      # - AWS_ACCESS_KEY_ID
      # - AWS_SECRET_ACCESS_KEY
      # ------------------------------------------------------
# 이 단계의 이름을 정의합니다.
      - name: Configure AWS credentials
# 재사용 가능한 GitHub Action을 지정합니다.
        uses: aws-actions/configure-aws-credentials@v2
# 해당 액션에 전달할 매개변수를 정의합니다.
        with:
# GitHub Secrets에 저장된 AWS 액세스 키
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
# GitHub Secrets에 저장된 AWS 비밀 키
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      # ------------------------------------------------------
      # Step 3: CloudFormation을 통한 VPC 스택 배포
      # - template-file: 사용할 템플릿 파일 경로
      # - stack-name: 생성할 스택 이름
      # - capabilities: IAM 권한이 필요한 경우 명시 (예: IAM 역할 포함된 템플릿)
      # 이 명령어는 기존 스택이 있다면 업데이트, 없으면 신규 생성합니다.
      # ------------------------------------------------------
# 이 단계의 이름을 정의합니다.
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy             --template-file vpc-3tier.yaml             --stack-name vpc-3tier-stack             --capabilities CAPABILITY_NAMED_IAM

      # ------------------------------------------------------
      # Step 4: CloudFormation 스택 상태 출력
      # 스택 생성 또는 업데이트가 정상적으로 완료되었는지 확인합니다.
      # ------------------------------------------------------
# 이 단계의 이름을 정의합니다.
      - name: Describe Stack
        run: aws cloudformation describe-stacks --stack-name vpc-3tier-stack